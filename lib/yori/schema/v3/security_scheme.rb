# frozen_string_literal: true

require 'yori/schema/v3/oauth_flows'

module Yori
  module Schema
    module V3
      # SecurityScheme:
      #   Defines a security scheme that can be used by the operations.
      #   Supported schemes are HTTP authentication, an API key (either as a header or as a query parameter),
      #   OAuth2's common flows (implicit, password, application and access code) as defined in RFC6749, and OpenID Connect Discovery.
      class SecurityScheme < Yori::SchemaBase
        # @!method type :Applies To Any;
        #   REQUIRED. The type of the security scheme.
        #   Valid values are "apiKey", "http", "oauth2", "openIdConnect"
        # @!method description :Applies To Any;
        #   A short description for security scheme. CommonMark syntax MAY be used for rich text representation.
        # @!method name :Applies To apiKey;
        #   REQUIRED. The name of the header, query or cookie parameter to be used.
        fields :type, :description, :name

        # @!method in_query
        #   Set 'query' value to 'in' field.
        def in_query
          self['in'] = 'query'
        end

        # @!method in_header
        #   Set 'header' value to 'in' field.
        def in_header
          self['in'] = 'header'
        end

        # @!method in_cookie
        #   Set 'cookie' value to 'in' field.
        def in_cookie
          self['in'] = 'cookie'
        end

        # @!method scheme :Applies To http;
        #   REQUIRED. The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235.
        # @!method bearerFormat :Applies To http ("bearer");
        #   A hint to the client to identify how the bearer token is formatted.
        #   Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
        fields :scheme, :bearerFormat

        # @!method flows :Applies To oauth2;
        #   REQUIRED. An object containing configuration information for the flow types supported.
        field_block :flows, Yori::Schema::V3::OAuthFlows

        # @!method openIdConnectUrl :Applies To openIdConnect
        #   REQUIRED. OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL.
        fields :openIdConnectUrl

        def validate!
          validate_type!
          case self['type']
          when 'apiKey'
            validate_as_api_key!
          when 'http'
            validate_as_http!
          when 'oauth2'
            validate_as_oauth2!
          when 'openIdConnect'
            validate_as_open_id_connect!
          end
        end

        def validate_type!
          validate_require_fields!('type')
          validate_limit_field_values!('type', 'apiKey', 'http', 'oauth2', 'openIdConnect')
        end

        def validate_as_api_key!
          validate_require_fields!('name', 'in')
          validate_limit_field_values!('in', 'query', 'header', 'cookie')
        end

        def validate_as_http!
          validate_require_fields!('scheme')
        end

        def validate_as_oauth2!
          validate_require_fields!('flows')
        end

        def validate_as_open_id_connect!
          validate_require_fields!('openIdConnectUrl')
        end
      end
    end
  end
end
